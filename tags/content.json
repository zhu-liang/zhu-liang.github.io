[{"title":"Resume","date":"2017-01-09T13:52:22.000Z","path":"2017/01/09/Resume/","text":"","tags":[]},{"title":"set up ssh reverse tunneling for remote debug","date":"2017-01-04T16:02:00.000Z","path":"2017/01/05/set-up-ssh-reverse-tunneling-for-remote-debug/","text":"这是一篇笔记型的记录从A 去公网机器B1ssh -N -R 2222:B的IP:22 而且在A机的 ~/.ssh/config（如果没有这个文件，直接新建一个）可以输入字段 KeepAlive （Something like that）这样A和B之间SSH连接有心跳包保持，不过Session Timeout 然后从机器C 连接去机器B，但是用户名是A的用户名1ssh B的IP -p 2222 如果要拷贝文件1scp -P 2222 ./hellotest A用户名:B的Ip Address 注意这里的P是大些 😄， 好记性不如烂笔头啊","tags":[]},{"title":"Docker Gerrit做code review","date":"2016-12-29T13:30:13.000Z","path":"2016/12/29/Docker-Gerrit做code-review/","text":"使用Docker搭建Gerrit For Code Review本文目的： 熟悉Docker使用，更加熟悉Markdown语法 学习如何使用Docker File生成Image，之前都是直接Pull Gerrit搭建好之后，熟悉Gerrit使用 运行环境OS XDocker Version 1.12.3 安装并访问GerritGerrit的Docker File地址：1git clone https://github.com/openfrontier/docker-gerrit 在本地文件夹运行1docker build -t openfrontier/gerrit . 当看见12345Step 33 : CMD /gerrit-start.sh ---&gt; Running in e1056099c95b ---&gt; 7cdd5a0b7f22Removing intermediate container e1056099c95bSuccessfully built 7cdd5a0b7f22 时则build完成使用命令1docker run -d -p 8080:8080 -p 29418:29418 openfrontier/gerrit 现在看起来已经运行起来了12345678910PowerEngine:docker-gerrit zl$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEopenfrontier/gerrit latest 7cdd5a0b7f22 8 minutes ago 233.7 MBopenjdk 8-jre-alpine d85b17c6762e 43 hours ago 107.9 MBwordpress latest d1d84847b56e 2 weeks ago 400.2 MBmysql latest 594dc21de8de 2 weeks ago 400.2 MBPowerEngine:docker-gerrit zl$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES8a75e80385e9 openfrontier/gerrit \"/gerrit-entrypoint.s\" About a minute ago Up About a minute 0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:29418-&gt;29418/tcp peaceful_wrightPowerEngine:docker-gerrit zl$ 访问本地8080端口已经可以访问了。 使用本地Gerrit未完待续…","tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"ActiveMQ之初使用","date":"2016-12-18T15:14:56.000Z","path":"2016/12/18/ActiveMQ之初使用/","text":"前言最近要调试Java端代码，涉及到Java端代码，就不得不提系统间通信。于是周末试了试运行了一个ActiveMQ在本地，同时用了ActiveMQ官网的Java代码段分别实现了一个Producer和一个Consumer。 安装本着边动手边理解的原则，先安装了ActiveMQ到本地，http://activemq.apache.org/getting-started.html上面是Apache ActiveMQ的官网，非常详细的指导。照着安装完成启动服务访问本机8161端口。可以进入Admin界面看到不同的消息提示。 在Eclipse中新建一个项目，使用了ActiveMQ官网的示例代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124package system_design;import org.apache.activemq.ActiveMQConnectionFactory; import javax.jms.Connection;import javax.jms.DeliveryMode;import javax.jms.Destination;import javax.jms.ExceptionListener;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageConsumer;import javax.jms.MessageProducer;import javax.jms.Session;import javax.jms.TextMessage; /** * Hello world! */public class Producer &#123; public static void main(String[] args) throws Exception &#123; thread(new HelloWorldProducer(), true); thread(new HelloWorldConsumer(), true); Thread.sleep(1000); &#125; public static void thread(Runnable runnable, boolean daemon) &#123; Thread brokerThread = new Thread(runnable); brokerThread.setDaemon(daemon); brokerThread.start(); &#125; public static class HelloWorldProducer implements Runnable &#123; public void run() &#123; try &#123; // Create a ConnectionFactory ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost\"); // Create a Connection Connection connection = connectionFactory.createConnection(); connection.start(); // Create a Session Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // Create the destination (Topic or Queue) Destination destination = session.createQueue(\"TEST.FOO\"); // Create a MessageProducer from the Session to the Topic or Queue MessageProducer producer = session.createProducer(destination); producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT); int iLoop = 10; while(iLoop &gt; 0) &#123; // Create a messages String text = \"Hello world! From: \" + Thread.currentThread().getName() + \" : \" + this.hashCode(); TextMessage message = session.createTextMessage(text); // Tell the producer to send the message System.out.println(\"Sent message: \"+text + message.hashCode() + \" : \" + Thread.currentThread().getName()); producer.send(message); iLoop--; &#125; // Clean up session.close(); connection.close(); &#125; catch (Exception e) &#123; System.out.println(\"Caught: \" + e); e.printStackTrace(); &#125; &#125; &#125; public static class HelloWorldConsumer implements Runnable, ExceptionListener &#123; public void run() &#123; try &#123; // Create a ConnectionFactory ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost\"); // Create a Connection Connection connection = connectionFactory.createConnection(); connection.start(); connection.setExceptionListener(this); // Create a Session Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // Create the destination (Topic or Queue) Destination destination = session.createQueue(\"TEST.FOO\"); // Create a MessageConsumer from the Session to the Topic or Queue MessageConsumer consumer = session.createConsumer(destination); // Wait for a message int iLoop = 20; while(iLoop &gt; 0)&#123; Message message = consumer.receive(1000); if (message instanceof TextMessage) &#123; TextMessage textMessage = (TextMessage) message; String text = textMessage.getText(); System.out.println(\"Received: \" + text); &#125; else &#123; System.out.println(\"Received: \" + message); &#125; iLoop--; &#125; consumer.close(); session.close(); connection.close(); &#125; catch (Exception e) &#123; System.out.println(\"Caught: \" + e); e.printStackTrace(); &#125; &#125; public synchronized void onException(JMSException ex) &#123; System.out.println(\"JMS Exception occured. Shutting down client.\"); &#125; &#125;&#125; 类名叫Producer，其中却同时有producer和consumer. 运行之后的结果如下：123456789101112131415161718192021222324252627282930313233log4j:WARN No appenders could be found for logger (org.apache.activemq.broker.jmx.ManagementContext).log4j:WARN Please initialize the log4j system properly.log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.Sent message: Hello world! From: Thread-0 : 19218348011371468768 : Thread-0Sent message: Hello world! From: Thread-0 : 19218348011508660406 : Thread-0Sent message: Hello world! From: Thread-0 : 192183480163826692 : Thread-0Sent message: Hello world! From: Thread-0 : 1921834801397203739 : Thread-0Sent message: Hello world! From: Thread-0 : 1921834801833296893 : Thread-0Sent message: Hello world! From: Thread-0 : 1921834801173646490 : Thread-0Sent message: Hello world! From: Thread-0 : 19218348011713437982 : Thread-0Sent message: Hello world! From: Thread-0 : 1921834801397771968 : Thread-0Sent message: Hello world! From: Thread-0 : 19218348012117604154 : Thread-0Sent message: Hello world! From: Thread-0 : 1921834801967979797 : Thread-0Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: Hello world! From: Thread-0 : 1921834801Received: nullReceived: nullReceived: nullReceived: nullReceived: nullReceived: nullReceived: nullReceived: nullReceived: nullReceived: null 系统间通信之ActiveMQ参考CSDN一篇一看就知道作者花了精力写出来的博客。地址如下http://blog.csdn.net/yinwenjie/article/details/50698695作者从运行机制到优化方法及集群配置给出了详细的分析，实在是翔实有料的一个系列。","tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Docker使用之Host本地一个简单的Wordpress服务器","date":"2016-12-18T14:45:07.000Z","path":"2016/12/18/Docker使用之Host本地一个简单的Wordpress服务器/","text":"首先我们需要陈列所需要的components MySQL 数据库 WordPress Instance 如果使用docker build镜像时出现如下错误1Can't connect to docker daemon. Is 'docker -d' running on this host? In Linux: From Create a Docker group section it is neccesary add user to docker group:1sudo usermod -aG docker $(whoami) Log out and log back in. This ensures your user is running with the correct permissions. In Mac OSX: As Dayel Ostraco says is necessary to add environments variables: 123$ docker-machine start # start virtual machine for docker$ docker-machine env # it's helps to get environment variables$ eval \"$(docker-machine env default)\" #set environment variables The docker-machine start outputs the comments to guide the process. 所以我们需要先 pull 这两个components各自的image1docker pull mysql 1docker pull wordpress 可以看到结果1234PowerEngine:~ zl$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEwordpress latest d1d84847b56e 3 days ago 400.2 MBmysql latest 594dc21de8de 4 days ago 400.2 MB 运行mysql服务器，并使用-e选项传入相应的参数123PowerEngine:~ zl$ docker run -e MYSQL_ROOT_PASSWORD=12345 -e MYSQL_USER=zhuliang -e MYSQL_PASSWORD=54321 -e MYSQL_DATABASE=newname_db -v /Users/zl/develop/tool/docker/mysql:/var/lib/mysql --name wordpress_db -d mysqlb2e5631bf826322a91eb0fb1c494956c83e4216cc7eec5794395e1b7ea33607fPowerEngine:~ zl$ 运行wordpress 镜像，同样使用-e传入相应参数123PowerEngine:~ zl$ docker run -e WORDPRESS_DB_USER=zhuliang -e WORDPRESS_DB_PASSWORD=54321 -e WORDPRESS_DB_NAME=newname_db -p 8088:80 -v /Users/zl/develop/tool/docker/wordpress/html:/var/www/html --link wordpress_db:mysql --name word_press_instance -d wordpress22c05b98f19d0459466c9f2f29b96322d5938d2e1cdeb972d2026fafea874643PowerEngine:~ zl$ 根据我们上一条中expose出来的端口号8088，访问1localhost:8088 则可以进入到熟悉的wordpress配置页面1234567WelcomeWelcome to the famous five-minute WordPress installation process! Just fill in the information below and you’ll be on your way to using the most extendable and powerful personal publishing platform in the world.Information neededPlease provide the following information. Don’t worry, you can always change these settings later. 如果需要进入到container instance里面去看file system的话使用如下命令1docker exec -i -t instance名字 /bin/bash","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]},{"title":"VirtualBox Mac安装一直卡死在验证pkg处","date":"2016-12-18T14:17:21.000Z","path":"2016/12/18/VirtualBox-Mac安装一直卡死在验证pkg处/","text":"主要现象就是在解压安装包后不能通过验证，一直卡死解决办法VirtualBox pkg 解压后在/Volumes/VitualBox/进入该文件夹使用命令1sudo installer -pkg /Volumes/VirtualBox/VirtualBox.pkg -target / 安装成功可以看见12345MyMac:VirtualBox zl$ sudo installer -pkg /Volumes/VirtualBox/VirtualBox.pkg -target /installer: Package name is Oracle VM VirtualBoxinstaller: Installing at base path /installer: The install was successful.MyMac:VirtualBox zl$ DashBoard中已经有了其图标","tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}]},{"title":"Hello World","date":"2016-12-15T14:53:46.000Z","path":"2016/12/15/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"安身 立命 怡情","date":"2016-12-13T16:00:31.000Z","path":"2016/12/14/安身-立命-怡情/","text":"人闲了就会想太多，竟然想起安身立命怡情来了。 对于我来说，只有怡情这一项来的简单点。那就是可以抽烟，吞云吐雾。费了很多功夫戒了烟，总觉得一旦有机会我就会抽上的。晚上编程抽一根也是挺舒服的。 总觉得差距巨大，其实罗马又不是一日建成。1System.out.println(\"hello world!);","tags":[{"name":"收音机","slug":"收音机","permalink":"http://yoursite.com/tags/收音机/"}]},{"title":"查看多一点源代码 理解设计模式","date":"2016-12-13T15:32:09.000Z","path":"2016/12/13/查看多一点源代码-理解设计模式/","text":"我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图 undefined 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","tags":[]},{"title":"我的第一篇用Hexo博客 Hexo与Github.io共用","date":"2016-11-05T07:00:19.000Z","path":"2016/11/05/我的第一篇用Hexo博客-Hexo与Github-io共用/","text":"","tags":[]}]